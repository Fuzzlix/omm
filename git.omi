--
local insert, remove = table.insert, table.remove;
--
if not make.utils.which("git"..make.utils.choose(WINDOWS, ".exe", "")) then 
  warning("'git' not found in path.");
  return; 
end;
--
git = make.newTool();
--
local dirlist = {};
function git:action_checkout(...)
  local par = self:checkParam(...);
  local dir, url, branch;
  if par.odir then
    dir = par.odir;
    par.odir = nil;
  else
    dir = par[1];
    remove(par, 1);
  end;
  if dirlist[dir] then return; end; -- alredy checked out
  if par.url and not par.src then 
    par.src = par.url;
    par.url = nil;
  end;
  if par.src then
    url = par.src;
    par.src = nil;
  else
    url = par[1];
    remove(par, 1);
  end;
  if par.branch then
    branch = par.branch;
    par.branch = nil;
  else
    branch = par[1];
    remove(par, 1);
  end;
  if type(dir) ~= "string" then quitMF("no valid odir given."); end;
  local fnx = dir..".git";
  if not make.options.forcegitscheckout then
    if type(url) ~= "string" then quitMF("no valid url given."); end;
    if make.utils.exists(dir) and not make.utils.isDir(dir) then
      make.quitMF("cant overwrite '%s'.", dir); 
    end;
    local filetime_delta = os.time() - make.utils.filetime(fnx);
    -- checkout at least 24 hours old ?
    if filetime_delta < 86400 and make.utils.exists(dir) then return; end;
  end;
  local cmd = "git checkout " .. url .. " " .. dir;
  if make.options.verbose then
    print(cmd);
  elseif not make.options.quiet then
    print("GIT-CO "..url);
  end;
  
  if not make.utils.execute(cmd, make.options.quiet) then
    quitMF("git checkout failed.");
  else 
    dirlist[dir] = true;
    local f = io.open(fnx,"w+");
    if f then
      f:write(("%s checked out with:\n%s ."):format(dir, cmd));
      f:close();
    end;
  end;
end;
git:add_action("checkout");
--
-- add toolchain specific commandline switches
local cmdl = require "Cmdl";
insert(cmdl.argsd,
  { tag = "forcegitscheckout", 
    cmd = {'-gfc', "--git-force-checkout"}, 
    descr = "force all git checkouts. (default: every 24 hours)",
    blockedby = {"printhelp", "printversion"},
  }
);
--
