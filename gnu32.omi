--
-- gnu toolchain - 32bit targets.
--
M32 = true;
OPTIMIZE = OPTIMIZE or "O2";
--
local choose  = make.utils.choose;
local WINDOWS = make.WINDOWS;
--
c99      = rule.define {name="c99",
  ext = ".c",    -- default extension for source files
  outext = ".o", -- output extension for typ="obj"
  SW_DEPGEN = "-MMD", -- compiler switch for dependency file generation.
  action = "gcc -c -m32 -std=gnu99 $OPTIMIZE $OPTIONS $DEFINES $SOURCE $LIBS -o $OUTFILE"
};
c99.prog = rule.define {name="c99.prog", 
  type = "prog",
  ext = ".c",   -- default extension for source files
  outext = choose(WINDOWS, ".exe", ""),    -- output extension for typ="prog"
  SW_DEPGEN = "-MMD", -- compiler switch for dependency file generation.
  action = "gcc -m32 -std=gnu99 $OPTIMIZE $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
c99.dlib = rule.define {name="c99.dlib", 
  type = "dlib",
  ext = ".c",   -- default extension for source files
  outext = choose(WINDOWS, ".dll", ".so"), -- output extension for typ="dlib"
  SW_DEPGEN = "-MMD", -- compiler switch for dependency file generation.
  action = "gcc -shared -m32 -std=gnu99 $OPTIMIZE $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
c99.slib = rule.define {name="c99.slib", 
  ext = ".o",    -- default extension for source files
  outext = ".a", -- output extension for typ="slib"
  action = "ar rcus $OUTFILE $SOURCES"
};
--
cc       = rule.define {name="cc",      
  ext = ".c",    -- default extension for source files
  outext = ".o", -- output extension for typ="obj"
  SW_DEPGEN = "-MMD", -- compiler switch for dependency file generation.
  action = "gcc -c -m32 $OPTIMIZE $OPTIONS $DEFINES $SOURCE $LIBS -o $OUTFILE"
};
cc.prog  = rule.define {name="cc.prog", 
  type = "prog",
  ext = ".c",   -- default extension for source files
  outext = choose(WINDOWS, ".exe", ""),    -- output extension for typ="prog"
  SW_DEPGEN = "-MMD", -- compiler switch for dependency file generation.
  action = "gcc -m32 $OPTIMIZE $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
cc.dlib  = rule.define {name="cc.dlib", 
  type = "dlib",
  ext = ".c",   -- default extension for source files
  outext = choose(WINDOWS, ".dll", ".so"), -- output extension for typ="dlib"
  SW_DEPGEN = "-MMD", -- compiler switch for dependency file generation.
  action = "gcc -shared -m32 $OPTIMIZE $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
cc.slib  = rule.define {name="cc.slib", 
  ext = ".o",    -- default extension for source files
  outext = ".a", -- output extension for typ="slib"
  action = "ar rcus $OUTFILE $SOURCES"
};
--
cpp      = rule.define {name="cpp",      
  ext = ".cpp .cxx .C", -- default extension for source files
  outext = ".o",        -- output extension for typ="obj"
  SW_DEPGEN = "-MMD",   -- compiler switch for dependency file generation.
  action  = "g++ -c -m32 $OPTIMIZE $OPTIONS $DEFINES $SOURCE $LIBS -o $OUTFILE"
};
cpp.prog = rule.define {name="cpp.prog", 
  type = "prog",
  ext = ".cpp .cxx .C", -- default extension for source files
  outext = choose(WINDOWS, ".exe", ""), -- output extension for typ="prog"
  SW_DEPGEN   = "-MMD", -- compiler switch for dependency file generation.
  action = "g++ -m32 $OPTIMIZE $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
cpp.dlib = rule.define {name="cpp.dlib", 
  type = "dlib",
  ext = ".cpp .cxx .C", -- default extension for source files
  outext = choose(WINDOWS, ".dll", ".so"), -- output extension for typ="dlib"
  SW_DEPGEN   = "-MMD", -- compiler switch for dependency file generation.
  action = "g++ -shared -m32 $OPTIMIZE $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
cpp.slib = rule.define {name="cpp.slib", 
  ext = ".o",    -- default extension for source files
  outext = ".a", -- output extension for typ="slib"
  action = "ar rcus $OUTFILE $SOURCES"
};
--
res      = rule.define {name="res", 
  ext    = ".rc",
  outext = ".o",
  action = "windres -F pe-i386 $OPTIONS $SOURCE $DEFINES -o $OUTFILE"
};
