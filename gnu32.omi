--
-- gnu toolchain - 32bit targets.
--
--luacheck: globals _DEBUG make rule cc c99 cpp res
--luacheck: globals M32 OPTIMIZE MAINSCRIPTDIR
--
M32 = true;
OPTIMIZE = OPTIMIZE or "O2";
--
local choose  = make.utils.choose;
local WINDOWS = make.WINDOWS;
local io_open, insert,       remove,       concat,       split,            fnabs =
      io.open, table.insert, table.remove, table.concat, make.utils.split, make.utils.abs;
-- extract filenames from depfile.
-- depfile format may differ for different compilers
local function getIncludes(depFileName)
  local f = io_open(depFileName);
  if not f then return; end;
  local txt = {};
  for line in f:lines() do insert(txt, line); end;
  f:close();
  if #txt == 0 then return; end;
  -- remove trailing backslashes
  for i, line in ipairs(txt) do txt[i] = line:gsub("%s+\\$", ""); end;
  -- create list of filenames
  txt = split(concat(txt, " "))
  remove(txt, 1);
  local res = {}; -- return value
  local t = {};   -- remember filenames
  -- prepare result. remove duplicate filenames.
  for _, fn in ipairs(txt) do
    fn = fnabs{MAINSCRIPTDIR, fn};
    if not t[fn] then
      insert(res, fn);
      t[fn] = true;
    end;
  end;
  return res;
end;

--
c99      = rule.define {name="c99",
  ext           = ".c", -- default extension for source files
  outext        = ".o", -- output extension for typ="obj"
  F_GETINCLUDES = getIncludes;
  SW_DEPGEN     = "-MMD", -- compiler switch for dependency file generation.
  SW_OPTIMIZE   = "-*";
  action        = "gcc -c -m32 -std=gnu99 $OPTIONS $DEFINES $SOURCE $LIBS -o $OUTFILE"
};
c99.prog = rule.define {name="c99.prog",
  ext           = ".c",   -- default extension for source files
  outext        = choose(WINDOWS, ".exe", ""),    -- output extension for typ="prog"
  F_GETINCLUDES = getIncludes;
  SW_DEPGEN     = "-MMD", -- compiler switch for dependency file generation.
  SW_OPTIMIZE   = "-*";
  SW_STRIP      = "-s",
  action        = "gcc -m32 -std=gnu99 $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
c99.dlib = rule.define {name="c99.dlib",
  ext           = ".c",   -- default extension for source files
  outext        = choose(WINDOWS, ".dll", ".so"), -- output extension for typ="dlib"
  F_GETINCLUDES = getIncludes;
  SW_DEPGEN     = "-MMD", -- compiler switch for dependency file generation.
  SW_OPTIMIZE   = "-*";
  SW_STRIP      = "-s",
  action        = "gcc -shared -m32 -std=gnu99 $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
c99.slib = rule.define {name="c99.slib",
  ext    = ".o", -- default extension for source files
  outext = ".a", -- output extension for typ="slib"
  action = "ar rc $OUTFILE $SOURCES"
};
--
cc       = rule.define {name="cc",
  ext         = ".c",    -- default extension for source files
  outext      = ".o",    -- output extension for typ="obj"
  SW_DEPGEN   = "-MMD",  -- compiler switch for dependency file generation.
  SW_OPTIMIZE = "-*";
  action      = "gcc -c -m32 $OPTIONS $DEFINES $SOURCE $LIBS -o $OUTFILE"
};
cc.prog  = rule.define {name="cc.prog",
  ext = ".c",   -- default extension for source files
  outext = choose(WINDOWS, ".exe", ""),    -- output extension for typ="prog"
  SW_OPTIMIZE = "-*";
  SW_STRIP = "-s",
  action = "gcc -m32 $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
cc.dlib  = rule.define {name="cc.dlib",
  ext = ".c",   -- default extension for source files
  outext = choose(WINDOWS, ".dll", ".so"), -- output extension for typ="dlib"
  SW_OPTIMIZE = "-*";
  SW_STRIP = "-s",
  action = "gcc -shared -m32 $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
cc.slib  = rule.define {name="cc.slib",
  ext    = ".o", -- default extension for source files
  outext = ".a", -- output extension for typ="slib"
  action = "ar rc $OUTFILE $SOURCES"
};
--
cpp      = rule.define {name="cpp",
  ext = ".cpp .cxx .C", -- default extension for source files
  outext = ".o",        -- output extension for typ="obj"
  SW_DEPGEN = "-MMD",   -- compiler switch for dependency file generation.
  SW_OPTIMIZE = "-*";
  action  = "g++ -c -m32 $OPTIONS $DEFINES $SOURCE $LIBS -o $OUTFILE"
};
cpp.prog = rule.define {name="cpp.prog",
  ext = ".cpp .cxx .C", -- default extension for source files
  outext = choose(WINDOWS, ".exe", ""), -- output extension for typ="prog"
  SW_OPTIMIZE = "-*";
  SW_STRIP = "-s",
  action = "g++ -m32 $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
cpp.dlib = rule.define {name="cpp.dlib",
  ext = ".cpp .cxx .C", -- default extension for source files
  outext = choose(WINDOWS, ".dll", ".so"), -- output extension for typ="dlib"
  SW_OPTIMIZE = "-*";
  SW_STRIP = "-s",
  action = "g++ -shared -m32 $OPTIONS $DEFINES $SOURCES $LIBS -o $OUTFILE"
};
cpp.slib = rule.define {name="cpp.slib",
  ext    = ".o", -- default extension for source files
  outext = ".a", -- output extension for typ="slib"
  action = "ar rc $OUTFILE $SOURCES"
};
--
res      = rule.define {name="res",
  ext    = ".rc",
  outext = ".o",
  action = "windres -F pe-i386 $OPTIONS $SOURCE $DEFINES -o $OUTFILE"
};
