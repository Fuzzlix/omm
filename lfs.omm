--- makefile for lua-module lfs
--
if not WINDOWS then quit("We are not running on Windows?") end;
--
-----------------------------------------------------------------------------------------------
--
LUAROOT = LUAROOT or PWD
LUA_BIN = LUA_BIN or LUAROOT.."/bin" -- install dir
TEMPDIR = TEMPDIR or LUAROOT.."/tmp" -- dir for intermediate files
--
local LUAVER     = make.Needs"lua".LUAVERSION
local TEMPDIR    = TEMPDIR .. "/lua" .. LUAVER
local MODULES    = LUAROOT
local LUA_ETCDIR = LUA_BIN.."/etc"
local LUA_IDIR   = LUA_BIN.."/include/" .. LUAVER
local LUA_CDIR   = LUA_BIN.."/lib/" .. LUAVER
local LUA_LDIR   = LUA_BIN.."/lua"

if svn then svn.checkout{"lfs", "https://github.com/keplerproject/luafilesystem/trunk"}; end;
if make.utils.isDir("lfs") then -- module lfs
  --  [[ 
  local DOCDIR  = MODULES .. "/lfs/doc/us";
  local MODULES = MODULES .. "/lfs/src";
  local MODS_C  = c99 {"lfs_s", src="lfs", base=MODULES, odir=TEMPDIR, needs="luas", cflags=CFLAGS}
  local MODD_C  = c99 {"lfs",   src="lfs", base=MODULES, odir=TEMPDIR, needs="lua", cflags=CFLAGS}
  --
  local MODLIB  = c99.library {'lfs'..LUAVER, odir=LUA_IDIR, inputs=MODS_C, needs="luas", cflags=CFLAGS}          
  local MODDLL  = c99.shared  {'lfs'..LUAVER, odir=LUA_CDIR, inputs=MODD_C, needs="lua", cflags=CFLAGS}
  target("lfs"..LUAVER, {MODLIB, MODDLL})
  default{MODLIB, MODDLL}
  if not make.Targets "lfs_doc" then
    local MODDOC= file {src="*.html *.png *.css", base=DOCDIR, odir=LUA_ETCDIR.."/lfs/doc"}
    target("lfs_doc", MODDOC)
    default{MODDOC}
  end;
  --]]
end;
