--- makefile for luaJIT
--
if not WINDOWS then quit("We are not running on Windows?") end;
--
-----------------------------------------------------------------------------------------------
--
LUAROOT = LUAROOT or PWD
LUA_BIN = LUA_BIN or LUAROOT.."/_install"              -- install dir
TEMPDIR = TEMPDIR or LUAROOT.."/tmp"                   -- dir for intermediate files

local LUA_VERSION  = "51"
local LUA_IDIR     = LUA_BIN.."/include/"..LUA_VERSION -- dir for headers and static libs
local LUA_CDIR     = LUA_BIN.."/lib/"..LUA_VERSION     -- dir for c modules
local LUA_LDIR     = LUA_BIN.."/lua"                   -- dir for lua modules 
local LUA_ETC_DIR  = LUA_BIN.."/etc"                   -- dir for documentation, tests, etc.
local JIT_SRC_DIR  = LUAROOT.."/luaJIT20/src"          -- where are the lua sources.
local JIT_HOSTDIR  = JIT_SRC_DIR.."/host"
local TEMPDIR      = TEMPDIR.."/"..LUA_VERSION
local CFLAGS       = CFLAGS .. " -fomit-frame-pointer"
if M32 then CFLAGS = CFLAGS .. " -march=i686" end

if not make.utils.isDir("luaJIT20") then
  if git then
    git.checkout{"luaJIT20", "https://github.com/Fuzzlix/LUA5.git"}
  elseif svn then
    svn.checkout{"luaJIT20", "https://github.com/Fuzzlix/LUA5/tree/JIT20"}
  end;
end
--
local MINILUA = make.utils.which("luajit") or 
  c99.prog {"minilua", src="minilua.c", base=JIT_HOSTDIR, odir=TEMPDIR, incdir=JIT_SRC_DIR};

local ARCHH   = rule {"buildvm_arch.h", prog=MINILUA, odir=TEMPDIR, 
  script="luaJIT20/dynasm/dynasm.lua", 
  dasc="luaJIT20/src/vm_x86.dasc",
  flag=M32 and "" or "-D P64",
  action = "$PROG $SCRIPT $FLAG -D JIT -D FFI -D FPU -D HFABI -D VER= -D WIN -o $OUTFILE $DASC"
};
local BUILDVM = c99.prog {"buildvm", odir=TEMPDIR, 
  src="buildvm buildvm_asm buildvm_peobj buildvm_lib buildvm_fold", 
  base=JIT_HOSTDIR, incdir={JIT_SRC_DIR, TEMPDIR}, needs=ARCHH,
  defines="LJ_ARCH_HASFPU=1 LJ_ABI_SOFTFP=0 LUAJIT_TARGET=LUAJIT_ARCH_"..(M32 and "x86" or "x64")
};
local LJ_VM   = rule {"lj_vm.o", prog=BUILDVM, odir=TEMPDIR,
  action = "$PROG -m peobj -o $OUTFILE"
};
local gendefh = rule.define {base=JIT_SRC_DIR, odir=TEMPDIR, prog=BUILDVM,
  src="lib_base.c lib_math.c lib_bit.c lib_string.c lib_table.c lib_io.c \z
      lib_os.c lib_package.c lib_debug.c lib_jit.c lib_ffi.c", 
  action = "$PROG -m $MODE -o $OUTFILE $SOURCES"
};
local FFDEF   = gendefh {"lj_ffdef.h",  mode="ffdef" }
local BCDEF   = gendefh {"lj_bcdef.h",  mode="bcdef" }
local RECDEF  = gendefh {"lj_recdef.h", mode="recdef"}
local LIBDEF  = gendefh {"lj_libdef.h", mode="libdef"}

local FOLDDEF = rule {"lj_folddef.h", base=JIT_SRC_DIR, prog=BUILDVM, odir=TEMPDIR,
  src="lj_opt_fold.c", 
  action = "$PROG -m folddef -o $OUTFILE $SOURCES"
}
local LJDEPS  = group {FFDEF, BCDEF, RECDEF, LIBDEF, FOLDDEF}
local VMDEF   = rule {"vmdef.lua", base=JIT_SRC_DIR, prog=BUILDVM, odir=TEMPDIR,
  src="lib_base.c lib_math.c lib_bit.c lib_string.c lib_table.c lib_io.c \z
      lib_os.c lib_package.c lib_debug.c lib_jit.c lib_ffi.c", 
  action = "$PROG -m vmdef -o $OUTFILE $SOURCES"
}
--
local LUAICON = res {"luajiticon", src="icon", base=JIT_SRC_DIR, odir=TEMPDIR}
local LUAOBJ  = c99 {"luajit", src="luajit", base=JIT_SRC_DIR, odir=TEMPDIR, 
  from="luajit:defines", cflags=CFLAGS
}
local DLIBOBJ = c99 {"luajitd_*", src="ljamalg", base=JIT_SRC_DIR, odir=TEMPDIR, 
  incdir={TEMPDIR, JIT_SRC_DIR},
  needs=LJDEPS, from="luajit:defines", cflags=CFLAGS
}
local SLIBOBJ = c99 {"luajits_*", src="ljamalg", base=JIT_SRC_DIR, odir=TEMPDIR, 
  incdir={TEMPDIR, JIT_SRC_DIR},
  needs=LJDEPS, from="luajits:defines", cflags=CFLAGS
}
--
local LUALIB  = c99.slib {'lua51', odir=LUA_IDIR, inputs={SLIBOBJ, LJ_VM}}
local LUADLL  = c99.dlib {'lua51', odir=LUA_BIN, inputs={DLIBOBJ, LJ_VM}}
local LUAEXE  = c99.prog {'luajit', odir=LUA_BIN, inputs={LUAOBJ, LUAICON, LUADLL}, needs="windows"}
--
local LUAINC  = file {src="lua.h luaconf.h lualib.h lauxlib.h", base=JIT_SRC_DIR, odir=LUA_IDIR}
local LUADOC  = file {src="*", base=JIT_SRC_DIR.."/../doc", odir=LUA_ETC_DIR.."/luajit/doc"}
local LUAJIT  = file {src="*.lua", base=JIT_SRC_DIR.."/jit", odir=LUA_CDIR.."/jit", inputs=VMDEF}
--
local LUA     = {LUAEXE, LUADLL, LUALIB, LUAINC, LUAJIT, LUADOC};

target("luajit", LUA);
default(LUA);
--
define_need{'luajit',  -- luajit, dynamically linked libs
  libs          = "lua51", 
  incdir        = LUA_IDIR, 
  defines       = "LUA_BUILD_AS_DLL", 
  libdir        = LUA_BIN .. " " .. LUA_IDIR,
  prerequisites = "luajit",
  LUAVERSION    = LUA_VERSION
};

define_need{'luajits', -- luajit, statically linked libs
  libs          = "luajit",
  incdir        = LUA_IDIR, 
  libdir        = LUA_IDIR,
  prerequisites = "luajit",
  LUAVERSION    = LUA_VERSION
};
--
define_need "lua = luajit"   -- need alias.
define_need "luas = luajits" -- need alias.
